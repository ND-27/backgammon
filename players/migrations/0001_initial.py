# Generated by Django 5.1.2 on 2024-10-21 16:39

import django.db.models.deletion
import django.utils.timezone
import players.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('back_game', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=150, unique=True, verbose_name='username')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('name', models.CharField(blank=True, max_length=100, null=True, verbose_name='name')),
                ('avatar', models.URLField(blank=True, default='default_avatar_url', null=True, verbose_name='avatar')),
                ('level', models.IntegerField(default=1, verbose_name='level')),
                ('level_xp', models.IntegerField(default=0, verbose_name='level xp')),
                ('game_token', models.IntegerField(default=0, verbose_name='game token')),
                ('referral_code', models.CharField(blank=True, max_length=10, unique=True, verbose_name='referral code')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_seen', models.DateTimeField(null=True, verbose_name='last seen date')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
            },
            managers=[
                ('objects', players.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GameHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('win', 'Win'), ('lose', 'Lose')], max_length=4)),
                ('created_time', models.DateTimeField(auto_now_add=True)),
                ('table', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='back_game.gametable')),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_as_user1', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games_as_user2', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Game_History',
                'verbose_name_plural': "Game_History's",
                'db_table': "game_history's",
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('invited_at', models.DateTimeField(auto_now_add=True)),
                ('invited_user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='invited_by', to=settings.AUTH_USER_MODEL)),
                ('inviter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='referrals_sent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Referral',
                'verbose_name_plural': 'Referrals',
                'db_table': 'referrals',
            },
        ),
    ]
